{
	"info": {
		"_postman_id": "6d12df12-683e-4b3f-84b0-97a929056698",
		"name": "WEare Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21507459"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"was created\");\r",
									"});\r",
									"const responseText = pm.response.text();\r",
									"\r",
									"// Use a regular expression to extract the ID\r",
									"const idMatch = responseText.match(/id (\\d+)/); // Matches 'id' followed by a number\r",
									"\r",
									"if (idMatch) {\r",
									"    const userId = idMatch[1]; // Extract the matched number (group 1)\r",
									"    pm.environment.set('userId', userId); // Save the ID as an environment variable\r",
									"    console.log('Extracted User ID:', userId);\r",
									"} else {\r",
									"    console.log('User ID not found in the response');\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a unique alphabetic username\r",
									"function generateUniqueAlphabeticUsername() {\r",
									"    const alphabets = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    let username = 'user';\r",
									"    for (let i = 0; i < 8; i++) { // Generate an 8-character random string\r",
									"        username += alphabets.charAt(Math.floor(Math.random() * alphabets.length));\r",
									"    }\r",
									"    return username;\r",
									"}\r",
									"\r",
									"// Function to generate a secure random password\r",
									"function generateRandomPassword(length = 6) {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    let password = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        password += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return password;\r",
									"}\r",
									"\r",
									"// Function to generate a unique email\r",
									"function generateUniqueEmail(username) {\r",
									"    return `${username}@example.com`;\r",
									"}\r",
									"\r",
									"// Generate a unique alphabetic username\r",
									"const username = generateUniqueAlphabeticUsername();\r",
									"\r",
									"// Generate password and email\r",
									"const password = generateRandomPassword();\r",
									"const email = generateUniqueEmail(username);\r",
									"\r",
									"// Save the generated values to environment variables\r",
									"pm.environment.set('username', username);\r",
									"pm.environment.set('password', password);\r",
									"pm.environment.set('email', email);\r",
									"\r",
									"// Log the generated values\r",
									"console.log('Generated username:', username);\r",
									"console.log('Generated password:', password);\r",
									"console.log('Generated email:', email);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authorities\": [\r\n        \"ROLE_USER\"\r\n    ],\r\n    \"category\": {\r\n        \"id\": 110,\r\n        \"name\": \"Cleaner\"\r\n    },\r\n    \"confirmPassword\": \"{{password}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"username\": \"{{username}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let jsessionid = pm.cookies.get(\"JSESSIONID\");\r",
									"\r",
									"if (jsessionid) {\r",
									"    // Set the cookie value with the prefix in the environment variable\r",
									"    pm.environment.set(\"JSESSIONID\", `${jsessionid}`);\r",
									"    console.log(\"Cookie 'JSESSIONID' value with prefix set in environment:\", `JSESSIONID=${jsessionid}`);\r",
									"} else {\r",
									"    console.log(\"Cookie 'JSESSIONID' not found in the response.\");\r",
									"}\r",
									"pm.test(\"Verify 'LOGOUT' is present in the response (case-insensitive)\", function () {\r",
									"    pm.expect(pm.response.text()).to.match(/logout/i);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/authenticate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 0,\r\n    \"firstName\": \"Mилко\",\r\n    \"lastName\": \"Антов\",\r\n    \"sex\": \"MALE\",\r\n    \"location\": {},\r\n    \"birthYear\": \"2001-01-02\",\r\n    \"personalReview\": \"\",\r\n    \"memberSince\": \"2023-11-14T15:30:00\",\r\n    \"picture\": \"\",\r\n    \"picturePrivacy\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/auth/{{userId}}/personal",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"auth",
								"{{userId}}",
								"personal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user - fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Body contains username field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/auth/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"auth",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Create post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"postId\", jsonData.postId);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Id field exist\", function () {\r",
									"    pm.expect(jsonData.postId).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": \"API post creation .!.\",\r\n  \"picture\": \"\",\r\n  \"public\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/post/auth/creator",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"post",
								"auth",
								"creator"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment to post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"commentId\", jsonData.commentId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains commentId\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"commentId\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"commentId\": 0,\r\n  \"content\": \"AMI DA\",\r\n  \"deletedConfirmed\": true,\r\n  \"postId\": \"{{postId}}\",\r\n  \"userId\": {{userId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/comment/auth/creator",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comment",
								"auth",
								"creator"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like/unlike post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returned post id equals id of the desired post\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.postId).to.eql(pm.environment.get(\"postId\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/post/auth/likesUp?postId={{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"post",
								"auth",
								"likesUp"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Like/unlike comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Returned comment id equals id of the desired comment\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.commentId).to.eql(pm.environment.get(\"commentId\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/comment/auth/likesUp?commentId={{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"comment",
								"auth",
								"likesUp"
							],
							"query": [
								{
									"key": "commentId",
									"value": "{{commentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": \"Update post\",\r\n  \"picture\": \"string\",\r\n  \"public\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/post/auth/editor?postId={{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"post",
								"auth",
								"editor"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains postId\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"postId\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/post/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"post",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/post/auth/manager?postId={{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"post",
								"auth",
								"manager"
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Connections",
			"item": [
				{
					"name": "Send request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"send friend request\");\r",
									"});\r",
									"\r",
									"let requestId = pm.environment.get(\"requestId\");\r",
									"if (!requestId) {\r",
									"    pm.environment.set(\"requestId\", 1); // Initialize to 1 if not present\r",
									"} else {\r",
									"    pm.environment.set(\"requestId\", parseInt(requestId) + 1); // Increment by 1\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{userId}}\",\r\n  \"username\": \"{{username}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/request",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"approved request\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/users/{{userId}}/request/approve?requestId={{requestId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{userId}}",
								"request",
								"approve"
							],
							"query": [
								{
									"key": "requestId",
									"value": "{{requestId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}